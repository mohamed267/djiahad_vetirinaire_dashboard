{"version":3,"file":"static/js/993.1152e64f.chunk.js","mappings":"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","sources":["components/datatable/utils/cells/composedTopBottom.jsx","components/datatable/utils/cells/composedLined.jsx","components/datatable/utils/extractColums.js","components/datatable/utils/cells/dateComponent.jsx","components/datatable/datatable.jsx","layouts/loader/loader.jsx","pages/form_field/list.jsx","structures/lists.js","utils/data.js","utils/date.js"],"sourcesContent":["\r\nconst extract =  (field ,  params)=>{\r\n    if(field.typeField ==\"search\"){\r\n        let data  =  params.row;\r\n        data  =  field.in ? data[field.in] : data\r\n        if(field.where){\r\n            data = data && data.filter(el=>{\r\n                let isTrue =  true;\r\n                // console.log(\"our where is \", field.where)\r\n                Object.keys(field.where).forEach(filt=>{\r\n                    if(data[filt] ==  field.where[filt]){\r\n                        return false\r\n                    }\r\n                   \r\n                })\r\n                return isTrue\r\n            })\r\n\r\n\r\n            return (\r\n                data ? data[0] ?  data[0][field.field] ?  \r\n                data[0][field.field] : \"\" : \"\" : \"\"\r\n            )\r\n            \r\n        }\r\n\r\n\r\n        \r\n       \r\n    }\r\n    return \"\";\r\n}\r\n\r\nconst ComposedTopBottom  =({structure , params})=>{\r\n    return(\r\n        <div>\r\n            {\r\n                structure  && \r\n                structure.fields &&\r\n                structure.fields.map((el , key)=>{\r\n                    return (<div key={key}>\r\n                        <span>\r\n                        {extract(el ,  params)}\r\n                        </span>\r\n                    </div>)\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ComposedTopBottom","\r\nimport {Link , useLocation} from  \"react-router-dom\"\r\nimport \"./composedLined.scss\"\r\n\r\nimport {exportData} from  \"../../../../utils/data\"\r\n\r\n\r\nconst  extractState = (data  , field)=>{\r\n    let state = {}\r\n    field && Object.keys(field).map(el=>{\r\n        state[el] = exportData(data,  field[el])\r\n    })\r\n\r\n    return state\r\n\r\n}\r\n\r\nconst ComposedLined  =({structure , params})=>{\r\n    const location = useLocation()\r\n    return(\r\n        <div className=\"composedLinedContainer\">\r\n            {\r\n                structure  && \r\n                structure.fields &&\r\n                structure.fields.map(el=>{\r\n                    if(el.type ==\"actionButton\"){\r\n                        return (\r\n                            <Link to={location.pathname?location.pathname : \"\"}\r\n                            state ={{\r\n                                [el.field] :exportData(params.row ,  el.field) ,\r\n                                for : el.for\r\n                            }}\r\n                        >\r\n                            <button>\r\n                                <i className={el.class}></i>\r\n                            </button>\r\n                        </Link>\r\n                        )\r\n                    }else if  (el.type == \"linkButton\"){\r\n                        return  (\r\n                            <Link to={`${el.link}/${exportData(params.row ,  el.field)}`}\r\n                                state ={extractState(params.row , el.state)}\r\n                            >\r\n                                <button>\r\n                                    <i className={el.class}></i>\r\n                                </button>\r\n                            </Link>\r\n                        \r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ComposedLined","\r\nimport ComposedTopBottom from \"./cells/composedTopBottom\";\r\nimport ComposedLined from \"./cells/composedLined\";\r\nimport DateComponent from  \"./cells/dateComponent\"\r\n\r\nconst cells = {\r\n    composedTopBottom : ComposedTopBottom,\r\n    composedLined :ComposedLined,\r\n    date : DateComponent\r\n}\r\n\r\n\r\nconst extractColums = (structure , t)=>{\r\n    let columns = structure && structure.map((el, key)=>{\r\n        let headerName= \"\";\r\n        el.headerName.map(name=>{\r\n            headerName += \"/\"+ t(name)\r\n        })\r\n\r\n        headerName = headerName.slice(1)\r\n        if(typeof(el.field)==\"string\"){\r\n          return {...el ,  headerName}\r\n        }else{\r\n            let Cell = cells[el.component] \r\n            const {field ,  ...structure} = el\r\n            return {\r\n                renderCell: (params) => {\r\n                    return <Cell  structure={el.field} params={params}/>\r\n                },\r\n                field : key,\r\n                ...structure , \r\n                headerName\r\n            }\r\n        }\r\n        \r\n    })\r\n\r\n\r\n    return columns.filter(el=>(el!=undefined))\r\n}\r\n\r\n\r\n\r\nexport default extractColums","import {Link} from  \"react-router-dom\"\r\nimport \"./composedLined.scss\"\r\n\r\nimport {exportData} from  \"../../../../utils/data\"\r\nimport {toLocal} from  \"../../../../utils/date\"\r\n\r\n\r\n\r\nconst DateComponent  =({structure , params})=>{\r\n    return(\r\n        <>\r\n            {\r\n                toLocal(exportData(params.row ,  structure.field))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DateComponent","import \"./datatable.scss\"\r\nimport {useState, useEffect , useRef } from \"react\"\r\nimport { DataGrid , \r\n    gridPageCountSelector,\r\n    gridPageSelector,\r\n    useGridApiContext,\r\n    useGridSelector,\r\n    arSD\r\n} from '@mui/x-data-grid';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport PaginationItem from '@mui/material/PaginationItem';\r\nimport {Link} from  \"react-router-dom\"\r\nimport {useTranslation} from  \"react-i18next\"\r\nimport extractColumns from  \"./utils/extractColums\"\r\nimport {exportData} from  \"../../utils/data\"\r\n\r\n// import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CustomPagination() {\r\n    const apiRef = useGridApiContext();\r\n    const page = useGridSelector(apiRef, gridPageSelector);\r\n    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n  \r\n    return (\r\n      <Pagination\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        shape=\"circular\"\r\n        page={page-1}\r\n        count={pageCount}\r\n        // @ts-expect-error\r\n        renderItem={\r\n            (props2) =>\r\n                (\r\n                    <PaginationItem {...props2} disableRipple />\r\n                )\r\n            \r\n        }\r\n        onChange={(event, value) => {\r\n            console.log(\"page is changign \", value)\r\n            apiRef.current.setPage(value-1)\r\n        }}\r\n      />\r\n    );\r\n}\r\n\r\n\r\n\r\nconst Datatable  = ({structure , row ,  data , direct,dataKey , pageChanged ,  dataCode})=>{\r\n    const {t} = useTranslation(\"common\")\r\n    const colums = extractColumns(structure.columns ,  t);\r\n\r\n    return(\r\n    <div \r\n      className=\"datatable\">\r\n            <DataGrid\r\n                localeText={ arSD.components.MuiDataGrid.defaultProps.localeText}\r\n                headerClassName=\"header-class\"\r\n                paginationMode=\"server\"\r\n                rows={data[dataKey]}\r\n                columns={colums}\r\n                pageSize={9}\r\n                rowCount={data.pages}\r\n                getRowId={(row) => row[structure.keyId]}\r\n                onPageChange={(newPage)=>{pageChanged(newPage + 1 ) }}\r\n                checkboxSelection\r\n                disableSelectionOnClick\r\n                // components={{\r\n                //     Pagination: CustomPagination ,\r\n                    \r\n                // }}\r\n            />\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Datatable;","import {Rings} from \"react-loader-spinner\";\r\nimport \"./loader.scss\"\r\n\r\nconst Loader = () =>{\r\n\r\n    return (\r\n        <div className=\"loader\">\r\n        <Rings ariaLabel=\"loading-indicator\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import {useState ,  useEffect} from  \"react\"\r\nimport  {useLocation , useParams} from \"react-router-dom\"\r\nimport {useDispatch , useSelector , } from  'react-redux'\r\nimport axios from  \"../../utils/axios\"\r\nimport Sidebar from  \"../../components/sidebar/sidebar\"\r\nimport Navbar from  \"../../components/navbar/navbar\"\r\nimport Datatable from   \"../../components/datatable/datatable\";\r\nimport Loader from \"../../layouts/loader/loader\"\r\nimport '../list/list.scss'\r\nimport structures from \"../../structures/lists\"\r\nimport {getFormFields , deleteFormFields , initFormField} from  \"../../store/formFieldReducer\" \r\n\r\nconst List = ()=>{\r\n    const [fetchCode ,  setFetchCode] = useState(\"\")\r\n    const {filter} = useParams()\r\n    const  dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const form_field =  useSelector(state=>state.form_field)\r\n    const opened = useSelector(state=>state.nav.opened)\r\n    useEffect(()=>{\r\n        dispatch(initFormField({}))\r\n    } ,[])\r\n    useEffect( ()=>{\r\n        if(location.state && location.state.for==\"delete\"){\r\n            let form_field_id = location.state.form_field_id\r\n            dispatch(deleteFormFields({form_field_id}))\r\n        }else{\r\n            dispatch(getFormFields({}))\r\n        }\r\n        \r\n    }, [location])\r\n\r\n    useEffect( ()=>{\r\n        if(form_field.deleted){\r\n            dispatch(getFormFields({}))\r\n        }\r\n        \r\n    }, [form_field.deleted])\r\n\r\n     if(form_field.loading){\r\n        return  (<Loader />)\r\n    }\r\n    \r\n\r\n    \r\n    return(\r\n        <div className=\"list\">\r\n            <Sidebar />\r\n            <div className={`listContainer ${opened ? \"nav-opened\" : \"nav-closed\"}`}>\r\n                <Navbar />\r\n                <Datatable\r\n                    data={form_field}\r\n                    structure={structures[\"form_field\"]}\r\n                    dataKey={\"form_fields\"}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List","\r\n\r\nconst users = {\r\n    keyFetchAll :\"days\",\r\n    keyId : \"user_id\",\r\n    columns : [\r\n        { \r\n            field: 'user_id', headerName: ['ID']\r\n        },\r\n        {\r\n            field: 'user_display_name',\r\n            headerName: ['users'],\r\n            editable: true,\r\n        },\r\n        {\r\n            field: {\r\n                fields : [\r\n                    {\r\n                        typeField : \"search\",\r\n                        where : {type : \"phone\"},\r\n                        in : \"social_accounts\",\r\n                        field: \"account\"\r\n                    } \r\n                    ,{\r\n                        typeField : \"search\",\r\n                        where : {type : \"email\"},\r\n                        in : \"socialAccounts\",\r\n                        field : \"account\"\r\n                    }\r\n                ]\r\n            },\r\n            component : \"composedTopBottom\",\r\n            headerName: ['phone','email'],\r\n        },\r\n        {\r\n            field: 'createdAt',\r\n            headerName: ['creationDate'] ,\r\n            editable: true,\r\n        },\r\n        {\r\n            field: {\r\n                fields : [\r\n                    {\r\n                        type : \"linkButton\",\r\n                        link : \"/users\",\r\n                        field : \"user_id\",\r\n                        class:\"las la-desktop btn-show-more\"\r\n                    } \r\n                ],\r\n            },\r\n            \r\n            component : \"composedLined\",\r\n            sortable: false,\r\n            headerName: ['actions'] \r\n        }\r\n    ]\r\n}\r\n\r\nconst demands = {\r\n    keyFetchAll :\"demands\",\r\n    keyId : \"client_demand_id\",\r\n    columns : [\r\n        { \r\n            field: 'client_demand_id', headerName: ['ID']\r\n        },\r\n        {\r\n            field: 'client_demand_title',\r\n            headerName: ['name']\r\n        },\r\n        {\r\n            field: 'createdAt',\r\n            headerName: ['creationDate'] \r\n        }\r\n    ]\r\n}\r\n\r\nconst services = {\r\n    keyFetchAll :\"services\",\r\n    keyId : \"service_id\",\r\n    columns : [\r\n        { \r\n            field: 'service_id', headerName: ['ID']\r\n        },\r\n        {\r\n            field: 'service_name',\r\n            headerName: ['name']\r\n        },\r\n        {\r\n            field: 'service_slug',\r\n            headerName: ['slug'] \r\n        },\r\n        {\r\n            field: {\r\n                fields : [\r\n                    {\r\n                        type : \"linkButton\",\r\n                        link : \"/services\",\r\n                        field : \"service_id\",\r\n                        state : {\r\n                            super_service_id : \"service_id\"\r\n                        },\r\n                        class:\"las la-desktop btn-show-more\"\r\n                    } \r\n                ],\r\n            },\r\n            \r\n            component : \"composedLined\",\r\n            sortable: false,\r\n            headerName: ['actions'] \r\n        }\r\n    ]\r\n}\r\n\r\nconst ads = {\r\n    keyFetchAll :\"ads\",\r\n    keyId : \"ad_id\",\r\n    columns : [\r\n        { \r\n            field: 'ad_id', headerName: ['ID']\r\n        },\r\n        {\r\n            field: \"ad_clickes\",\r\n            headerName: ['clickes']\r\n        },\r\n        {\r\n            field: 'ad_url',\r\n            headerName: ['url'] \r\n        },\r\n        {\r\n            field: {\r\n                fields : [\r\n                    {\r\n                        type : \"linkButton\",\r\n                        link : \"/ads\",\r\n                        field : \"ad_id\",\r\n                        class:\"las la-desktop btn-show-more\"\r\n                    } \r\n                ],\r\n            },\r\n            \r\n            component : \"composedLined\",\r\n            sortable: false,\r\n            headerName: ['actions'] \r\n        }\r\n    ]\r\n}\r\n\r\n\r\nconst document = {\r\n    keyFetchAll :\"forms\",\r\n    keyId : \"form_id\",\r\n    columns : [\r\n        { \r\n            field: 'form_id', headerName: ['ID']\r\n        },\r\n         { \r\n            field: 'farm_name', headerName: ['nom de la ferme'],\r\n            width : 180\r\n        }\r\n        ,\r\n        { \r\n            field: {\r\n                field : 'date'\r\n            }, headerName: ['date de consultation'] ,\r\n            component : \"date\",\r\n            width : 180\r\n        },\r\n        {\r\n            field: {\r\n                fields : [\r\n                    {\r\n                        type : \"linkButton\",\r\n                        link : \"/document\",\r\n                        field : \"form_id\",\r\n                        class:\"las la-desktop btn-show-more\"\r\n                    },\r\n                    {\r\n                        type : \"actionButton\",\r\n                        field : \"form_id\",\r\n                        for : \"delete\",\r\n                        class:\"las la-trash-alt btn-delete\"\r\n                    },\r\n\r\n                ],\r\n            },\r\n            \r\n            component : \"composedLined\",\r\n            sortable: false,\r\n            headerName: ['actions'] \r\n        }\r\n    ]\r\n}\r\n\r\nconst form_field = {\r\n    keyFetchAll :\"forms\",\r\n    keyId : \"form_field_id\",\r\n    columns : [\r\n        { \r\n            field: 'form_field_id', headerName: ['ID']\r\n        },\r\n         { \r\n            field: 'form_field_name', headerName: ['nom de champs']\r\n        },\r\n        { \r\n            field: 'form_field_type', headerName: ['type de champs']\r\n        },\r\n        {\r\n            field: {\r\n                fields : [\r\n                    {\r\n                        type : \"linkButton\",\r\n                        link : \"/form_field\",\r\n                        field : \"form_field_id\",\r\n                        class:\"las la-desktop btn-show-more\"\r\n                    } ,\r\n                    {\r\n                        type : \"actionButton\",\r\n                        field : \"form_field_id\",\r\n                        for : \"delete\",\r\n                        class:\"las la-trash-alt btn-delete\"\r\n                    },\r\n                ],\r\n            },\r\n            \r\n            component : \"composedLined\",\r\n            sortable: false,\r\n            headerName: ['actions'] \r\n        }\r\n    ]\r\n}\r\n\r\nexport default {document , form_field};\r\n\r\n","const dataProf = (data , field) =>{\r\n  if(field){\r\n    let listField = field.split(\".\");\r\n    listField.forEach(el=>{\r\n        if(data && data[el]){\r\n            data  = data[el] \r\n        }else{\r\n            data =  '';\r\n        } \r\n    })\r\n    return data\r\n   }\r\n   return data\r\n}\r\n\r\n\r\nconst dataFilter = (data ,  field)=>{\r\n    data  =  field.in ? dataProf(data , field.in) ? dataProf(data , field.in) : []  : []\r\n    if(field.where){\r\n        data = data && data.filter(el=>{\r\n            let isTrue =  true;\r\n            Object.keys(field.where).forEach(filt=>{\r\n                if(dataProf(el, filt) !=  field.where[filt]){\r\n                    isTrue = false\r\n                }               \r\n            })\r\n            return isTrue\r\n        })\r\n\r\n\r\n\r\n        return (\r\n            dataProf(data[0], field.field)\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport const exportData = (data , field)=>{\r\n    console.log(\"extracting data \", field, data)\r\n    if(typeof(field)==\"string\"){\r\n        return dataProf(data, field)\r\n    }else{\r\n        return dataFilter(data, field)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const reformate = (data, field)=>{\r\n    \r\n\r\n    let snapData = {}\r\n    if(!field){\r\n        snapData = data \r\n    }else{\r\n        if(field){\r\n            let listField = field.split(\".\");\r\n            let slider = {}\r\n            snapData = slider;\r\n            listField.forEach((el, key)=>{\r\n                if(key == listField.length-1 ){\r\n                    slider[el] = data\r\n                }else{              \r\n                    slider[el] = {};\r\n                    slider = slider[el]\r\n                }\r\n                \r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return snapData\r\n\r\n}\r\n\r\n","exports.toLocal = (date)=>{\r\n    console.log(\"date is \", date)\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n\r\n    \r\n\r\n    return(\r\n        new Date(date).toLocaleDateString(undefined , options)\r\n    )\r\n\r\n}"],"names":["extract","field","params","typeField","data","row","in","where","filter","el","Object","keys","forEach","filt","structure","fields","map","key","extractState","state","exportData","location","useLocation","className","type","to","pathname","for","class","link","cells","composedTopBottom","ComposedTopBottom","composedLined","ComposedLined","date","toLocal","t","headerName","name","slice","Cell","component","renderCell","undefined","dataKey","direct","pageChanged","dataCode","useTranslation","colums","extractColumns","columns","DataGrid","localeText","arSD","headerClassName","paginationMode","rows","pageSize","rowCount","pages","getRowId","keyId","onPageChange","newPage","checkboxSelection","disableSelectionOnClick","ariaLabel","useState","dispatch","useParams","useDispatch","form_field","useSelector","opened","nav","useEffect","initFormField","form_field_id","deleteFormFields","getFormFields","deleted","loading","structures","document","keyFetchAll","width","sortable","dataProf","split","console","log","isTrue","dataFilter","reformate","snapData","listField","slider","length","exports","Date","toLocaleDateString","weekday","year","month","day"],"sourceRoot":""}