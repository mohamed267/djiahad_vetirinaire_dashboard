{"version":3,"file":"static/js/163.105fafc6.chunk.js","mappings":"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","sources":["components/datatable/utils/cells/composedTopBottom.jsx","components/datatable/utils/cells/composedLined.jsx","components/datatable/utils/extractColums.js","components/datatable/utils/cells/dateComponent.jsx","components/datatable/datatable.jsx","components/form/form.jsx","components/form/formCreate.jsx","components/singleWrapper/listItems.jsx","components/singleWrapper/utils/extractComponents.js","pages/form_field/form_field.jsx","structures/form.js","utils/date.js"],"sourcesContent":["\r\nconst extract =  (field ,  params)=>{\r\n    if(field.typeField ==\"search\"){\r\n        let data  =  params.row;\r\n        data  =  field.in ? data[field.in] : data\r\n        if(field.where){\r\n            data = data && data.filter(el=>{\r\n                let isTrue =  true;\r\n                // console.log(\"our where is \", field.where)\r\n                Object.keys(field.where).forEach(filt=>{\r\n                    if(data[filt] ==  field.where[filt]){\r\n                        return false\r\n                    }\r\n                   \r\n                })\r\n                return isTrue\r\n            })\r\n\r\n\r\n            return (\r\n                data ? data[0] ?  data[0][field.field] ?  \r\n                data[0][field.field] : \"\" : \"\" : \"\"\r\n            )\r\n            \r\n        }\r\n\r\n\r\n        \r\n       \r\n    }\r\n    return \"\";\r\n}\r\n\r\nconst ComposedTopBottom  =({structure , params})=>{\r\n    return(\r\n        <div>\r\n            {\r\n                structure  && \r\n                structure.fields &&\r\n                structure.fields.map((el , key)=>{\r\n                    return (<div key={key}>\r\n                        <span>\r\n                        {extract(el ,  params)}\r\n                        </span>\r\n                    </div>)\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ComposedTopBottom","\r\nimport {Link , useLocation} from  \"react-router-dom\"\r\nimport \"./composedLined.scss\"\r\n\r\nimport {exportData} from  \"../../../../utils/data\"\r\n\r\n\r\nconst  extractState = (data  , field)=>{\r\n    let state = {}\r\n    field && Object.keys(field).map(el=>{\r\n        state[el] = exportData(data,  field[el])\r\n    })\r\n\r\n    return state\r\n\r\n}\r\n\r\nconst ComposedLined  =({structure , params})=>{\r\n    const location = useLocation()\r\n    return(\r\n        <div className=\"composedLinedContainer\">\r\n            {\r\n                structure  && \r\n                structure.fields &&\r\n                structure.fields.map(el=>{\r\n                    if(el.type ==\"actionButton\"){\r\n                        return (\r\n                            <Link to={location.pathname?location.pathname : \"\"}\r\n                            state ={{\r\n                                [el.field] :exportData(params.row ,  el.field) ,\r\n                                for : el.for\r\n                            }}\r\n                        >\r\n                            <button>\r\n                                <i className={el.class}></i>\r\n                            </button>\r\n                        </Link>\r\n                        )\r\n                    }else if  (el.type == \"linkButton\"){\r\n                        return  (\r\n                            <Link to={`${el.link}/${exportData(params.row ,  el.field)}`}\r\n                                state ={extractState(params.row , el.state)}\r\n                            >\r\n                                <button>\r\n                                    <i className={el.class}></i>\r\n                                </button>\r\n                            </Link>\r\n                        \r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ComposedLined","\r\nimport ComposedTopBottom from \"./cells/composedTopBottom\";\r\nimport ComposedLined from \"./cells/composedLined\";\r\nimport DateComponent from  \"./cells/dateComponent\"\r\n\r\nconst cells = {\r\n    composedTopBottom : ComposedTopBottom,\r\n    composedLined :ComposedLined,\r\n    date : DateComponent\r\n}\r\n\r\n\r\nconst extractColums = (structure , t)=>{\r\n    let columns = structure && structure.map((el, key)=>{\r\n        let headerName= \"\";\r\n        el.headerName.map(name=>{\r\n            headerName += \"/\"+ t(name)\r\n        })\r\n\r\n        headerName = headerName.slice(1)\r\n        if(typeof(el.field)==\"string\"){\r\n          return {...el ,  headerName}\r\n        }else{\r\n            let Cell = cells[el.component] \r\n            const {field ,  ...structure} = el\r\n            return {\r\n                renderCell: (params) => {\r\n                    return <Cell  structure={el.field} params={params}/>\r\n                },\r\n                field : key,\r\n                ...structure , \r\n                headerName\r\n            }\r\n        }\r\n        \r\n    })\r\n\r\n\r\n    return columns.filter(el=>(el!=undefined))\r\n}\r\n\r\n\r\n\r\nexport default extractColums","import {Link} from  \"react-router-dom\"\r\nimport \"./composedLined.scss\"\r\n\r\nimport {exportData} from  \"../../../../utils/data\"\r\nimport {toLocal} from  \"../../../../utils/date\"\r\n\r\n\r\n\r\nconst DateComponent  =({structure , params})=>{\r\n    return(\r\n        <>\r\n            {\r\n                toLocal(exportData(params.row ,  structure.field))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DateComponent","import \"./datatable.scss\"\r\nimport {useState, useEffect , useRef } from \"react\"\r\nimport { DataGrid , \r\n    gridPageCountSelector,\r\n    gridPageSelector,\r\n    useGridApiContext,\r\n    useGridSelector,\r\n    arSD\r\n} from '@mui/x-data-grid';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport PaginationItem from '@mui/material/PaginationItem';\r\nimport {Link} from  \"react-router-dom\"\r\nimport {useTranslation} from  \"react-i18next\"\r\nimport extractColumns from  \"./utils/extractColums\"\r\nimport {exportData} from  \"../../utils/data\"\r\n\r\n// import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CustomPagination() {\r\n    const apiRef = useGridApiContext();\r\n    const page = useGridSelector(apiRef, gridPageSelector);\r\n    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n  \r\n    return (\r\n      <Pagination\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        shape=\"circular\"\r\n        page={page-1}\r\n        count={pageCount}\r\n        // @ts-expect-error\r\n        renderItem={\r\n            (props2) =>\r\n                (\r\n                    <PaginationItem {...props2} disableRipple />\r\n                )\r\n            \r\n        }\r\n        onChange={(event, value) => {\r\n            console.log(\"page is changign \", value)\r\n            apiRef.current.setPage(value-1)\r\n        }}\r\n      />\r\n    );\r\n}\r\n\r\n\r\n\r\nconst Datatable  = ({structure , row ,  data , direct,dataKey , pageChanged ,  dataCode})=>{\r\n    const {t} = useTranslation(\"common\")\r\n    const colums = extractColumns(structure.columns ,  t);\r\n\r\n    return(\r\n    <div \r\n      className=\"datatable\">\r\n            <DataGrid\r\n                localeText={ arSD.components.MuiDataGrid.defaultProps.localeText}\r\n                headerClassName=\"header-class\"\r\n                paginationMode=\"server\"\r\n                rows={data[dataKey]}\r\n                columns={colums}\r\n                pageSize={9}\r\n                rowCount={data.pages}\r\n                getRowId={(row) => row[structure.keyId]}\r\n                onPageChange={(newPage)=>{pageChanged(newPage + 1 ) }}\r\n                checkboxSelection\r\n                disableSelectionOnClick\r\n                // components={{\r\n                //     Pagination: CustomPagination ,\r\n                    \r\n                // }}\r\n            />\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Datatable;","import {useState , useEffect} from 'react'\r\nimport {Form , FormGroup ,Label , Row , Col  } from  \"reactstrap\"\r\nimport {useLocation} from \"react-router-dom\"\r\nimport {useTranslation} from  \"react-i18next\"\r\nimport SwitchToogle from '../switchToggle/switchToggle'\r\nimport FileInput   from '../fileInput/fileInput'\r\nimport Input from '../input/input'\r\nimport TextArea from \"../input/textarea\"\r\nimport AddressInput from '../input/address'\r\nimport GpsInput from \"../input/gps\"\r\nimport Button from '../button/button'\r\nimport Select from \"../select/select\"\r\nimport ComplexSelect from \"../select/selectComplex\"\r\nimport StoredSelect from \"../select/storedSelect\"\r\nimport Map from \"../map/map\"\r\nimport Loader from \"../../layouts/loader/loader\"\r\nimport {exportData , reformate} from  \"../../utils/data\" \r\nimport \"./form.scss\"\r\n\r\nconst extractComponents = (data ={} , fields = []  , t , handleChange , isRacine  , loading )=>{\r\n    if(isRacine){    \r\n        let form_field_type =  data && data.form_field_type   \r\n        if(form_field_type && (form_field_type.value ===\"SELECT\" || form_field_type.value ===\"COMPLEXSELECT\" ) ){\r\n             fields[3] =  {\r\n                type : \"select\", \r\n                label : \"options\",\r\n                creatable : true,\r\n                field : \"field_options\",\r\n                name: \"field_options\",  \r\n                isMulti : true,   \r\n                // icon : \"las la-lock input-icon\",\r\n                placeholder : \"enter your options\",\r\n                xl :6,\r\n                id :  \"field_options\"\r\n            }\r\n        }else{\r\n            fields[3] =  {\r\n                type :  \"none\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        fields.map(field=>{\r\n            if(field.type == \"none\"){\r\n                return null\r\n            }\r\n            else if(field.type==\"title\"){\r\n                return (\r\n                    <Col md={12} className='d-flex gap-3 align-items-center mb-3 '>\r\n                        <p className=\"title_details\">{field.label}</p>\r\n                        <p className=\"divider mx-4\"></p>\r\n                    </Col>\r\n                )\r\n            }else if(field.type){\r\n                if(field.type==\"imageInput\"){\r\n                    return(\r\n                        <Col xl={field.xl}>\r\n                            <FileInput \r\n                                src={exportData(data , field.field)} \r\n                                name={field.name}/>\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"input\"){\r\n                    return ( \r\n                        <Col xl={field.xl}>\r\n                            <Input \r\n                                label={field.label}\r\n                                value={exportData(data , field.field)}\r\n                                name={field.name}\r\n                                field={field.field}\r\n                                placeholder={field.placeholder}\r\n                                className={field.className}\r\n                                type={field.typeInput}\r\n                                id={`id_form_${field.id}`}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"textarea\"){\r\n                    return ( \r\n                        <Col xl={field.xl}>\r\n                            <TextArea \r\n                                label={field.label}\r\n                                value={exportData(data , field.field)}\r\n                                name={field.name}\r\n                                field={field.field}\r\n                                placeholder={field.placeholder}\r\n                                className={field.className}\r\n                                id={`id_form_${field.id}`}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n\r\n                }else if(field.type ==\"address\"){\r\n                    return (\r\n                        <Col xl={field.xl}>\r\n                            <AddressInput \r\n                                id={field.id}\r\n                                value=  {exportData(data , field.field)} \r\n                                field = {field.field}\r\n                                label = {field.label}\r\n                                name={field.name}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                    \r\n                }else if(field.type ==\"gps\"){\r\n                    return (\r\n                        <Col xl={field.xl}>\r\n                            <GpsInput \r\n                                id={field.id}\r\n                                value=  {exportData(data , field.field)} \r\n                                field = {field.field}\r\n                                label = {field.label}\r\n                                name={field.name}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                    \r\n                }else if(field.type==\"button\"){\r\n                    return (\r\n                        <Col xl={field.xl}>\r\n                            {\r\n                                loading ? <div>loading </div> : null\r\n                            }\r\n                            <Button \r\n                                className={field.className}\r\n                                text={field.text}\r\n\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"switch\"){\r\n                    return(\r\n                        <Col xl={field.xl}>\r\n                            <SwitchToogle\r\n                                id={field.id}\r\n                                value=  {exportData(data , field.field)} \r\n                                checkedOn = {field.checkedOn}\r\n                                on = {field.on}\r\n                                off = {field.off}\r\n                                label = {field.label}\r\n                                name={field.name}\r\n                                field={field.field}\r\n                                 changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"select\"){\r\n                    return(\r\n                        <Col xl={field.xl} className={field.className}>\r\n                            {\r\n                                (field.typeSelect == \"store\")\r\n                                ?  \r\n                                <StoredSelect \r\n                                    id={field.id}\r\n                                    value=  {exportData(data , field.field)} \r\n                                    field = {field.field}\r\n                                    field_deleted ={field.field_deleted}\r\n                                    options={field.options}\r\n                                    label = {field.label}\r\n                                    name={field.name}\r\n                                    isMulti={field.isMulti}\r\n                                    creatable={field.creatable}\r\n                                    changed={handleChange} />\r\n                                :\r\n                                <Select\r\n                                    id={field.id}\r\n                                    value=  {exportData(data , field.field)} \r\n                                    options={field.options}\r\n                                    field = {field.field}\r\n                                    field_deleted ={field.field_deleted}\r\n                                    label = {field.label}\r\n                                    name={field.name}\r\n                                    creatable={field.creatable}\r\n                                    isMulti={field.isMulti}\r\n                                    changed={handleChange} \r\n                                /> \r\n                            }\r\n                        </Col>\r\n                    )\r\n                }else if(field.type == \"select_complex\"){\r\n                    return(\r\n                        <Col xl={field.xl} className={field.className +\" row align-items-center\"}>\r\n                            {\r\n                                <ComplexSelect \r\n                                    id={field.id}\r\n                                    value=  {exportData(data , field.field)} \r\n                                    field = {field.field}\r\n                                    options={field.options}\r\n                                    label = {field.label}\r\n                                    name={field.name}\r\n                                    isMulti={field.isMulti}\r\n                                    creatable={field.creatable}\r\n                                    changed={handleChange}\r\n                                /> \r\n                            }\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"map\"){\r\n                    return(\r\n                        <Col xl={field.xl}>\r\n                           <Map \r\n                                typeMap={field.typeMap}\r\n                                lat={exportData(data , field.field_lat)}\r\n                                lng={exportData(data , field.field_lng)}\r\n                                radius={exportData(data , field.field_radius)}\r\n                                field_radius={field.field_radius}\r\n                                field_lat={field.field_lat}\r\n                                field_lng={field.field_lng}\r\n                                changed={handleChange}\r\n                           />\r\n                        </Col>\r\n                    )\r\n                }\r\n\r\n            }else{\r\n                return (\r\n                    <Col xl={field.xl} >\r\n                        <Row className={field.className}>\r\n                            {extractComponents(data , field.fields)}\r\n                        </Row>\r\n                    </Col>\r\n                )\r\n            }\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst FormElement = ({structure , data ={} , submit = ()=>{} , restricted , loading} )=>{\r\n    const {t} = useTranslation(\"common\");\r\n    const location = useLocation()\r\n    const [dataQuery , setDataQuery] =  useState(data);\r\n    const handleChange = (key , value)=>{\r\n        console.log(\"handled \",  dataQuery)\r\n        setDataQuery({...dataQuery ,...reformate(value , key )})\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(data){\r\n            setDataQuery(data)\r\n        }\r\n    }  , [data]) \r\n\r\n    useEffect(()=>{\r\n        console.log(\"data query 3 \", dataQuery)\r\n    },[dataQuery])\r\n\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        submit(dataQuery);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={`form ${structure.className}`}>\r\n            <h4 className=\"title\">{t(structure.title)}</h4> \r\n            <Form onSubmit={handleSubmit}>\r\n                <Row gap={2} className=\"justify-content-between\">\r\n\r\n\r\n\r\n                    {\r\n                        // structure.fields.map(field=>{\r\n                        //     if(field.type=\"imageInput\"){\r\n                        //         return(\r\n                        //             <Col xl={field.xl}>\r\n                        //                 <FileInput \r\n                        //                     src={exportData(data , field.field)} \r\n                        //                     name={field.name}/>\r\n                        //             </Col>\r\n                        //         )\r\n                        //     }\r\n                        // })\r\n                        loading  ? \r\n                        (<Loader />)\r\n                        :\r\n                        extractComponents(dataQuery ,structure.fields , setDataQuery , handleChange , restricted , loading)\r\n                    }\r\n                    {/* <Col xl={6}>\r\n                        <Row>\r\n                        <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Name\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Email\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Number\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    \r\n                   \r\n                    <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Address\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    \r\n                    <Col xl={4}>\r\n                        <SwitchToogle/>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <SwitchToogle/>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <SwitchToogle/>\r\n                    </Col> \r\n                    <Col xl={12}>\r\n                        <Button className=\"w-100 btn--primary\">\r\n                            {t(\"save chages\")}\r\n                        </Button>\r\n                    </Col> */}\r\n                    \r\n                </Row>\r\n            </Form>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default FormElement","import {useState , useEffect} from 'react'\r\nimport {Form , FormGroup ,Label , Row , Col  } from  \"reactstrap\"\r\nimport {useLocation} from \"react-router-dom\"\r\nimport {useTranslation} from  \"react-i18next\"\r\nimport SwitchToogle from '../switchToggle/switchToggle'\r\nimport FileInput   from '../fileInput/fileInput'\r\nimport Input from '../input/input'\r\nimport TextArea from \"../input/textarea\"\r\nimport AddressInput from '../input/address'\r\nimport GpsInput from \"../input/gps\"\r\nimport Button from '../button/button'\r\nimport Select from \"../select/select\"\r\nimport ComplexSelect from \"../select/selectComplex\"\r\nimport StoredSelect from \"../select/storedSelect\"\r\nimport Map from \"../map/map\"\r\nimport Loader from \"../../layouts/loader/loader\"\r\nimport {exportData , reformate} from  \"../../utils/data\" \r\nimport \"./form.scss\"\r\n\r\nconst extractComponents = (data ={} , fields = []  , t , handleChange , isRacine  , loading )=>{\r\n    if(isRacine){    \r\n        let form_field_type =  data && data.form_field_type   \r\n        if(form_field_type && (form_field_type.value ===\"SELECT\" || form_field_type.value ===\"COMPLEXSELECT\" ) ){\r\n             fields[3] =  {\r\n                type : \"select\", \r\n                label : \"options\",\r\n                creatable : true,\r\n                field : \"field_options\",\r\n                name: \"field_options\",  \r\n                isMulti : true,   \r\n                // icon : \"las la-lock input-icon\",\r\n                placeholder : \"enter your options\",\r\n                xl :6,\r\n                id :  \"field_options\"\r\n            }\r\n        }else{\r\n            fields[3] =  {\r\n                type :  \"none\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        fields.map(field=>{\r\n            if(field.type == \"none\"){\r\n                return null\r\n            }\r\n            else if(field.type==\"title\"){\r\n                return (\r\n                    <Col md={12} className='d-flex gap-3 align-items-center mb-3 '>\r\n                        <p className=\"title_details\">{field.label}</p>\r\n                        <p className=\"divider mx-4\"></p>\r\n                    </Col>\r\n                )\r\n            }else if(field.type){\r\n                if(field.type==\"imageInput\"){\r\n                    return(\r\n                        <Col xl={field.xl}>\r\n                            <FileInput \r\n                                src={exportData(data , field.field)} \r\n                                name={field.name}/>\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"input\"){\r\n                    return ( \r\n                        <Col xl={field.xl}>\r\n                            <Input \r\n                                label={field.label}\r\n                                value={exportData(data , field.field)}\r\n                                name={field.name}\r\n                                field={field.field}\r\n                                placeholder={field.placeholder}\r\n                                className={field.className}\r\n                                type={field.typeInput}\r\n                                id={`id_form_${field.id}`}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"textarea\"){\r\n                    return ( \r\n                        <Col xl={field.xl}>\r\n                            <TextArea \r\n                                label={field.label}\r\n                                value={exportData(data , field.field)}\r\n                                name={field.name}\r\n                                field={field.field}\r\n                                placeholder={field.placeholder}\r\n                                className={field.className}\r\n                                id={`id_form_${field.id}`}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n\r\n                }else if(field.type ==\"address\"){\r\n                    return (\r\n                        <Col xl={field.xl}>\r\n                            <AddressInput \r\n                                id={field.id}\r\n                                value=  {exportData(data , field.field)} \r\n                                field = {field.field}\r\n                                label = {field.label}\r\n                                name={field.name}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                    \r\n                }else if(field.type ==\"gps\"){\r\n                    return (\r\n                        <Col xl={field.xl}>\r\n                            <GpsInput \r\n                                id={field.id}\r\n                                value=  {exportData(data , field.field)} \r\n                                field = {field.field}\r\n                                label = {field.label}\r\n                                name={field.name}\r\n                                changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                    \r\n                }else if(field.type==\"button\"){\r\n                    return (\r\n                        <Col xl={field.xl}>\r\n                            {\r\n                                loading ? <div>loading </div> : null\r\n                            }\r\n                            <Button \r\n                                className={field.className}\r\n                                text={field.text}\r\n\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"switch\"){\r\n                    return(\r\n                        <Col xl={field.xl}>\r\n                            <SwitchToogle\r\n                                id={field.id}\r\n                                value=  {exportData(data , field.field)} \r\n                                checkedOn = {field.checkedOn}\r\n                                on = {field.on}\r\n                                off = {field.off}\r\n                                label = {field.label}\r\n                                name={field.name}\r\n                                field={field.field}\r\n                                 changed={handleChange}\r\n                            />\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"select\"){\r\n                    return(\r\n                        <Col xl={field.xl} className={field.className}>\r\n                            {\r\n                                (field.typeSelect == \"store\")\r\n                                ?  \r\n                                <StoredSelect \r\n                                    id={field.id}\r\n                                    value=  {exportData(data , field.field)} \r\n                                    field = {field.field}\r\n                                    field_deleted ={field.field_deleted}\r\n                                    options={field.options}\r\n                                    label = {field.label}\r\n                                    name={field.name}\r\n                                    isMulti={field.isMulti}\r\n                                    creatable={field.creatable}\r\n                                    changed={handleChange} />\r\n                                :\r\n                                <Select\r\n                                    id={field.id}\r\n                                    value=  {exportData(data , field.field)} \r\n                                    options={field.options}\r\n                                    field = {field.field}\r\n                                    field_deleted ={field.field_deleted}\r\n                                    label = {field.label}\r\n                                    name={field.name}\r\n                                    creatable={field.creatable}\r\n                                    isMulti={field.isMulti}\r\n                                    changed={handleChange} \r\n                                /> \r\n                            }\r\n                        </Col>\r\n                    )\r\n                }else if(field.type == \"select_complex\"){\r\n                    return(\r\n                        <Col xl={field.xl} className={field.className +\" row align-items-center\"}>\r\n                            {\r\n                                <ComplexSelect \r\n                                    id={field.id}\r\n                                    value=  {exportData(data , field.field)} \r\n                                    field = {field.field}\r\n                                    options={field.options}\r\n                                    label = {field.label}\r\n                                    name={field.name}\r\n                                    isMulti={field.isMulti}\r\n                                    creatable={field.creatable}\r\n                                    changed={handleChange}\r\n                                /> \r\n                            }\r\n                        </Col>\r\n                    )\r\n                }else if(field.type==\"map\"){\r\n                    return(\r\n                        <Col xl={field.xl}>\r\n                           <Map \r\n                                typeMap={field.typeMap}\r\n                                lat={exportData(data , field.field_lat)}\r\n                                lng={exportData(data , field.field_lng)}\r\n                                radius={exportData(data , field.field_radius)}\r\n                                field_radius={field.field_radius}\r\n                                field_lat={field.field_lat}\r\n                                field_lng={field.field_lng}\r\n                                changed={handleChange}\r\n                           />\r\n                        </Col>\r\n                    )\r\n                }\r\n\r\n            }else{\r\n                return (\r\n                    <Col xl={field.xl} >\r\n                        <Row className={field.className}>\r\n                            {extractComponents(data , field.fields)}\r\n                        </Row>\r\n                    </Col>\r\n                )\r\n            }\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst FormElement = ({structure , submit = ()=>{} , restricted , loading} )=>{\r\n    const {t} = useTranslation(\"common\");\r\n    const location = useLocation()\r\n    const [dataQuery , setDataQuery] =  useState({});\r\n    const handleChange = (key , value)=>{\r\n        setDataQuery({...dataQuery ,...reformate(value , key )})\r\n    }\r\n\r\n   \r\n\r\n    useEffect(()=>{\r\n        console.log(\"data query 3 \", dataQuery)\r\n    },[dataQuery])\r\n\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        submit(dataQuery);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={`form ${structure.className}`}>\r\n            <h4 className=\"title\">{t(structure.title)}</h4> \r\n            <Form onSubmit={handleSubmit}>\r\n                <Row gap={2} className=\"justify-content-between\">\r\n\r\n\r\n\r\n                    {\r\n                        // structure.fields.map(field=>{\r\n                        //     if(field.type=\"imageInput\"){\r\n                        //         return(\r\n                        //             <Col xl={field.xl}>\r\n                        //                 <FileInput \r\n                        //                     src={exportData(data , field.field)} \r\n                        //                     name={field.name}/>\r\n                        //             </Col>\r\n                        //         )\r\n                        //     }\r\n                        // })\r\n                        loading  ? \r\n                        (<Loader />)\r\n                        :\r\n                        extractComponents(dataQuery ,structure.fields , setDataQuery , handleChange , restricted , loading)\r\n                    }\r\n                    {/* <Col xl={6}>\r\n                        <Row>\r\n                        <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Name\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Email\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Number\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    \r\n                   \r\n                    <Col xl={12}>\r\n                        <FormGroup>\r\n                            <Label for=\"exampleEmail\">\r\n                            Address\r\n                            </Label>\r\n                                <Input\r\n                                id=\"exampleEmail\"\r\n                                name=\"email\"\r\n                                placeholder=\"with a placeholder\"\r\n                                type=\"email\"\r\n                                />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    \r\n                    <Col xl={4}>\r\n                        <SwitchToogle/>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <SwitchToogle/>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <SwitchToogle/>\r\n                    </Col> \r\n                    <Col xl={12}>\r\n                        <Button className=\"w-100 btn--primary\">\r\n                            {t(\"save chages\")}\r\n                        </Button>\r\n                    </Col> */}\r\n                    \r\n                </Row>\r\n            </Form>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default FormElement","import  {useTranslation} from  \"react-i18next\"\r\nimport {exportData} from  \"../../utils/data\"\r\n\r\nconst ListItems = ({data , structure}) =>{\r\n    const {t} = useTranslation(\"common\")\r\n    return(\r\n        <>\r\n            <h1 className=\"title\">{t(structure[\"name\"])}</h1>\r\n            <ul className=\"items\">\r\n                {\r\n                    structure && structure.fields && structure.fields.map(field=>{\r\n                        if(field.type==\"header\"){\r\n                            return(\r\n                                <li className=\"item\">\r\n                                    <div>\r\n                                        <img src={exportData(data ,   field.img.field)}\r\n                                         alt=\"\" \r\n                                        className=\"itemImg\" />\r\n                                    </div>\r\n                                    <div className=\"details\">\r\n                                        <p className=\"top\">{exportData(data ,   field.top.field)}</p>\r\n                                        <p className=\"bottom\">{exportData(data ,   field.bottom.field)}</p>\r\n                                    </div>\r\n                                </li>\r\n\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                \r\n                <li className=\"item\">\r\n                    <p className=\"title\">{t(\"status\")}</p>\r\n                    <div className=\"details\">\r\n                        <p className=\"status\" >{t(\"activated\")}</p>                              \r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ListItems","import ListItems from  \"../listItems\"\r\nimport Form from \"../../form/form\"\r\nimport DataTable from \"../../datatable/datatable\"\r\n\r\nconst components = {\r\n    listItems : ListItems,\r\n    form : Form,\r\n    dataTable : DataTable\r\n}\r\n\r\nconst extract = (data , fields)=>{\r\n    return (\r\n        <>\r\n            {\r\n                fields && fields.map(field=>{\r\n                    if(field.type){\r\n                        let Cell = components[field.type]\r\n                        return (\r\n                            <Cell\r\n                                structure = {field}\r\n                                row={data}\r\n                                direct={true}\r\n                            /> \r\n                        )\r\n\r\n                    }else{\r\n                        return (\r\n                            <div className={`${field.className}`}>\r\n                                {\r\n                                    (\r\n                                        extract(data ,  field.fields)\r\n                                    )\r\n                                } \r\n                            </div>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst extractComponents = (data , fields)=>{\r\n    return(\r\n        <>\r\n            {\r\n                fields && fields.map(field=>{\r\n                    if(field.type){\r\n                        return (\r\n                            extract(data ,  field.fields)   \r\n                        )\r\n\r\n                    }else{\r\n                        return (\r\n                            <div className={`${field.className}`}>\r\n                                {\r\n                                    (\r\n                                        extract(data ,  field.fields)\r\n                                    )\r\n                                } \r\n                            </div>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default extractComponents","import {useState , useEffect} from \"react\"\r\nimport { useTranslation } from \"react-i18next\";\r\nimport  {useLocation , useParams , Navigate} from \"react-router-dom\"\r\nimport {useDispatch , useSelector} from  'react-redux'\r\nimport Sidebar from  \"../../components/sidebar/sidebar\"\r\nimport Navbar from  \"../../components/navbar/navbar\"\r\nimport SingleWrapper from  \"../../components/singleWrapper/singleWrapper\"\r\nimport {exportData} from  \"../../utils/data\"\r\nimport { createFormField} from \"../../store/formFieldReducer\"\r\nimport Form from \"../../components/form/formCreate\"\r\n\r\nimport structures from \"../../structures/form\"\r\nimport './form_field.scss'\r\n\r\n\r\n\r\nconst FieldFrom = ()=>{\r\n    // const {t} = useTranslation(\"common\")\r\n    const  dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const loading = useSelector(state=>state.form_field.details.loading)\r\n    const created = useSelector(state=>state.form_field.details.created)\r\n    \r\n    const opened = useSelector(state=>state.nav.opened)\r\n    // const {region_id} = useParams()\r\n\r\n\r\n    \r\n\r\n\r\n    const handleAddFormField = (data) =>{\r\n        dispatch(createFormField(\r\n            {\r\n                ...data , \r\n                field_group_name : data.field_group.value ? data.field_group.value :  data.field_group.field_group_name,\r\n                form_field_type : data.form_field_type? data.form_field_type.value : \"\",\r\n                field_options : data.field_options ? data.field_options.map(option=>option.label) : null\r\n            }\r\n        \r\n        ))\r\n    }\r\n\r\n    console.log(\"fffd \" ,structures[location.pathname.slice(1).split('/')[0]])\r\n   \r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"form_field\">\r\n            {\r\n                created  && <Navigate to=\"/form_field\" />\r\n            }\r\n         <Sidebar />\r\n        <div className={`form_fieldContainer ${opened ? \"nav-opened\" : \"nav-closed\"}`}>\r\n            <Navbar />\r\n\r\n            <div className=\"mainContainer\">\r\n                <Form\r\n                    structure={structures[location.pathname.slice(1).split('/')[0]]} \r\n                    submit={handleAddFormField}\r\n                    restricted={true}\r\n                    loading={loading}\r\n                >\r\n                </Form>\r\n            </div>\r\n            \r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FieldFrom","\r\n\r\nconst login = {\r\n    type : \"row\",\r\n    fields : [\r\n        {\r\n            type : \"input\", \r\n            label : \"username\",\r\n            name: \"admin_username\",\r\n            typeInput : \"text\",\r\n            className:\"rounded-login mb-2\",\r\n            field : \"admin_username\",\r\n            // icon:\"las la-user input-icon\",\r\n            placeholder : \"enter your username\",\r\n            xl :12,\r\n            id :  \"admin_username\"\r\n        },\r\n        {\r\n            type : \"input\", \r\n            label : \"password\",\r\n            typeInput : \"password\",\r\n            field : \"admin_password\",\r\n            name: \"admin_password\",\r\n            // icon : \"las la-lock input-icon\",\r\n            className:\"rounded-login m-2\",\r\n            placeholder : \"enter your password\",\r\n            xl :12,\r\n            id :  \"admin_password\"\r\n        },\r\n        {\r\n            xl : 12,\r\n            className:\"px-3 my-4\",\r\n            fields : [\r\n                {\r\n                    type : \"button\",\r\n                    className : \"w-100 btn--primary\",\r\n                    text : \"save changes\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n                \r\n\r\n\r\n}\r\n\r\nconst region = {\r\n    type : \"row\",\r\n    className : \"w-100 bg-white  shadow  rounded p-3\",\r\n    fields : [\r\n        {\r\n            type : \"input\", \r\n            label : \"region name\",\r\n            name: \"region_name\",\r\n            typeInput : \"text\",\r\n            field : \"region_name\",\r\n            placeholder : \"enter your region name\",\r\n            xl :6,\r\n            id :  \"region_name\"\r\n        },\r\n        {\r\n            type : \"select\", \r\n            label : \"wilayas\",\r\n            typeSelect : \"store\",\r\n            field : \"wilayas\",\r\n            field_deleted : \"deleted_wilayas\",\r\n            name: \"wilayas\",\r\n            isMulti : true,\r\n            className:\"z-index-10000\",\r\n            options : {\r\n                key : \"wilayas\",\r\n                where : \"wilaya\",\r\n                label :  \"wilaya_name\",\r\n                value :  \"wilaya_id\"\r\n            } ,        \r\n            // icon : \"las la-lock input-icon\",\r\n            placeholder : \"enter your wilayas\",\r\n            xl :6,\r\n            id :  \"wilayas\"\r\n        },\r\n        \r\n\r\n        {\r\n            type : \"map\", \r\n            label : \"map\",\r\n            typeMap : \"range\",\r\n            field_lat : \"lat\",  \r\n            field_lng :  \"lng\",\r\n            field_radius : \"radius\",   \r\n            field : \"map\",\r\n            name: \"map\",            \r\n            xl :12,\r\n            id :  \"map\"\r\n        },\r\n        \r\n        {\r\n            xl : 12,\r\n            className:\"px-3 my-4\",\r\n            fields : [\r\n                {\r\n                    type : \"button\",\r\n                    className : \"w-100 btn--primary\",\r\n                    text : \"save changes\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n                \r\n\r\n\r\n}\r\n\r\nconst form_field = {\r\n    type : \"row\",\r\n    className : \"w-100 bg-white  shadow  rounded p-3\",\r\n    fields : [\r\n        {\r\n            type : \"input\", \r\n            label : \"field name\",\r\n            name: \"form_field_name\",\r\n            typeInput : \"text\",\r\n            field : \"form_field_name\",\r\n            placeholder : \"enter the name\",\r\n            xl :6,\r\n            id :  \"field_name\"\r\n        },\r\n        {\r\n            type : \"select\", \r\n            label : \"group name\",\r\n            typeSelect : \"store\",\r\n            creatable : true,\r\n            field : \"field_group\",\r\n            name: \"field_group\",\r\n            options : {\r\n                key : \"field_groups\",\r\n                where : \"field_group\",\r\n                value :  \"field_group_id\",\r\n                label :  \"field_group_name\"\r\n            } ,        \r\n            // icon : \"las la-lock input-icon\",\r\n            placeholder : \"enter your wilayas\",\r\n            xl :6,\r\n            id :  \"groups\"\r\n        },\r\n        {\r\n            type : \"select\", \r\n            label : \"type field\",\r\n            field : \"form_field_type\",\r\n            name: \"form_field_type\",\r\n            options : {\r\n                options : [\r\n                    {value : \"NUMBER\" , label : \"number\"},\r\n                    {value : \"BOOLEAN\" , label : \"true/false\"},\r\n                    {value : \"SELECT\" , label : \"select\"},\r\n                    {value : \"COMPLEXSELECT\" , label : \"select complex\"},\r\n                    {value : \"ADDRESS\" , label : \"address\"},\r\n                    {value : \"GPS\" , label : \"coordonnée gps\"},\r\n                    {value : \"STRING\" , label : \"text\"},\r\n                    {value : \"TEXT\" , label : \"textarea\"},\r\n                    {value : \"DATE\" , label : \"date\"},\r\n                ]\r\n            } ,        \r\n            // icon : \"las la-lock input-icon\",\r\n            placeholder : \"enter your wilayas\",\r\n            xl :6,\r\n            id :  \"type_fields\"\r\n        },\r\n        {\r\n            type :  \"none\"\r\n        },\r\n        {\r\n            xl : 12,\r\n            className:\"px-3 my-4\",\r\n            fields : [\r\n                {\r\n                    type : \"button\",\r\n                    className : \"w-100 btn--primary\",\r\n                    text : \"save changes\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n                \r\n\r\n\r\n}\r\n\r\nconst nav = {\r\n    type : \"row\",\r\n    className : \"w-100 bg-white  shadow  rounded p-3\",\r\n    fields : [\r\n        {\r\n            type : \"select\", \r\n            label : \"filter navigation\",\r\n            typeSelect : \"store\",\r\n            field : \"form_fields_nav\",\r\n            name: \"wilayas\",\r\n            className:\"z-index-10000\",\r\n            options : {\r\n                key : \"form_fields_nav\",\r\n                where : \"form_field\",\r\n                label :  \"form_field_name\",\r\n                value :  \"form_field_id\"\r\n            } ,        \r\n            // icon : \"las la-lock input-icon\",\r\n            placeholder : \"enter your form field\",\r\n            xl :6,\r\n            id :  \"form_fields\"\r\n        },\r\n        {\r\n            xl : 12,\r\n            className:\"px-3 my-4\",\r\n            fields : [\r\n                {\r\n                    type : \"button\",\r\n                    className : \"w-100 btn--primary\",\r\n                    text : \"save changes\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n                \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default {login , region , form_field , nav };\r\n\r\n","exports.toLocal = (date)=>{\r\n    console.log(\"date is \", date)\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n\r\n    \r\n\r\n    return(\r\n        new Date(date).toLocaleDateString(undefined , options)\r\n    )\r\n\r\n}"],"names":["extract","field","params","typeField","data","row","in","where","filter","el","Object","keys","forEach","filt","structure","fields","map","key","extractState","state","exportData","location","useLocation","className","type","to","pathname","for","class","link","cells","composedTopBottom","ComposedTopBottom","composedLined","ComposedLined","date","toLocal","t","headerName","name","slice","Cell","component","renderCell","undefined","dataKey","direct","pageChanged","dataCode","useTranslation","colums","extractColumns","columns","DataGrid","localeText","arSD","headerClassName","paginationMode","rows","pageSize","rowCount","pages","getRowId","keyId","onPageChange","newPage","checkboxSelection","disableSelectionOnClick","extractComponents","handleChange","isRacine","loading","form_field_type","value","label","creatable","isMulti","placeholder","xl","id","md","src","typeInput","changed","text","checkedOn","on","off","typeSelect","field_deleted","options","typeMap","lat","field_lat","lng","field_lng","radius","field_radius","submit","restricted","useState","dataQuery","setDataQuery","useEffect","console","log","title","onSubmit","e","preventDefault","gap","reformate","img","alt","top","bottom","Form","DataTable","dispatch","useDispatch","useSelector","form_field","details","created","opened","nav","structures","split","createFormField","field_group_name","field_group","field_options","option","login","region","exports","Date","toLocaleDateString","weekday","year","month","day"],"sourceRoot":""}